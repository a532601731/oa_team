<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper  
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bwf.dao.UserMapper">

	<resultMap type="com.bwf.entity.Group" id="group">
		<result property="groupId" column="group_id"/>
		<result property="groupName" column="group_name"/>
		<result property="level" column="level"/>
	</resultMap>
	
	<resultMap type="com.bwf.entity.Auth" id="childAuth">
		<result property="authId" column="auth_id2"/>
		<result property="authName" column="auth_name2"/>
		<result property="menuUrl" column="menu_url2"/>
	</resultMap>
	
	<resultMap type="com.bwf.entity.Auth" id="auth">
		<id property="authId" column="auth_id"/>
		<result property="authName" column="auth_name"/>
		<result property="menuUrl" column="menu_url"/>
		<collection property="childAuth" resultMap="childAuth"></collection>
	</resultMap>
	
	<select id="getAuthById" parameterType="int" resultMap="auth">
		SELECT a.auth_id AS auth_id, a.auth_name AS auth_name, m.url AS menu_url,
		a1.auth_id AS auth_id2, a1.auth_name AS auth_name2, m1.url AS menu_url2
		FROM roles_authes AS ra
		LEFT OUTER JOIN authority AS a ON a.auth_id = ra.auth_id
		LEFT OUTER JOIN authes_menues AS am ON a.auth_id = am.auth_id
		LEFT OUTER JOIN menues AS m ON m.menu_id = am.menu_id
		LEFT OUTER JOIN authority AS a1 ON a1.pid = ra.auth_id
		LEFT OUTER JOIN authes_menues AS am1 ON a1.auth_id = am1.auth_id
		LEFT OUTER JOIN menues AS m1 ON m1.menu_id = am1.menu_id
		WHERE ra.role_id = #{role_id} AND a.pid = 0;
	</select>
	
	<resultMap type="com.bwf.entity.Role" id="role">
		<result property="roleId" column="role_id"/>
		<result property="roleName" column="role_name"/>
		<collection property="authes" column="role_id" select="getAuthById"></collection>
	</resultMap>
	
	<resultMap type="com.bwf.entity.User" id="user">
		<id property="userId" column="user_id"/>
		<result property="userName" column="user_name"/>
		<result property="departmentName" column="department_name"/>
		<result property="nickname" column="nickname"/>
		<result property="password" column="password"/>
		<association property="role" resultMap="role"/>
		<association property="group" resultMap="group"></association>
	</resultMap>
	
	<select id="getUserByLogin" parameterType="com.bwf.entity.User" resultMap="user">
		SELECT u.user_id AS user_id, user_name, department_name, nickname, password,
		r.role_id AS role_id, r.role_name AS role_name, g.group_id AS group_id,
		g.group_name AS group_name, g.level AS level
		FROM users AS u 
		LEFT OUTER JOIN departments AS d ON u.department_id = d.department_id
		LEFT OUTER JOIN groups_users AS gu ON u.user_id = gu.user_id
		LEFT OUTER JOIN groups AS g ON gu.group_id = g.group_id
		LEFT OUTER JOIN users_roles AS ur ON u.user_id = ur.user_id
		LEFT OUTER JOIN roles AS r ON ur.role_id = r.role_id
		WHERE u.user_name = #{userName} and password = #{password};
	</select>
	<update id="updateNickname" parameterType="com.bwf.entity.User">
    	update `users` 
    	set nickname=#{nickname}    	
    	where user_id = #{userId}
    </update>
    <update id="updatePwd" parameterType="com.bwf.entity.User">
    	update `users` 
    	set password=#{password} 	
    	where user_id = #{userId}
    </update>
    <select id="getUserByUserId" parameterType="int" resultMap="user">
		SELECT u.user_id AS user_id, user_name, department_name, nickname, password,
		r.role_id AS role_id, r.role_name AS role_name, g.group_id AS group_id,
		g.group_name AS group_name, g.level AS level
		FROM users AS u 
		LEFT OUTER JOIN departments AS d ON u.department_id = d.department_id
		LEFT OUTER JOIN groups_users AS gu ON u.user_id = gu.user_id
		LEFT OUTER JOIN groups AS g ON gu.group_id = g.group_id
		LEFT OUTER JOIN users_roles AS ur ON u.user_id = ur.user_id
		LEFT OUTER JOIN roles AS r ON ur.role_id = r.role_id
		WHERE u.user_id=#{id}
	</select>
    
    
	
</mapper> 